from .Agent import Agent

class LazyAlgorithm:
    """
    Represents a lazy algorithm for generating routes for multiple agents on a graph.

    Attributes:
        graph: The graph on which the algorithm operates.
        agents (list): A list of Agent objects representing the agents utilizing the algorithm.
    """

    def __init__(self, graph):
        """
        Initializes a LazyAlgorithm object.

        Args:
            graph: The graph on which the algorithm operates.
        """
        self.graph = graph
        self.agents = []
    
    def generate_routes(self):
        """
        Generates routes for agents using a lazy approach.

        The method assigns points to agents, limiting the total time spent on each route to 6 hours.
        """
        unvisited = list(range(self.graph.num_points))  # List of indices of unvisited points

        # Create a new agent and start assigning points
        while unvisited:
            current_agent = Agent(self.graph.num_points)
            self.agents.append(current_agent)

            # Limit the number of hours per route
            current_hours = 0
            while unvisited and current_hours < 6:
                next_point = unvisited.pop(0)  # Simply takes the next point from the list
                if not current_agent.tour:  # First visit
                    current_agent.visit_point(next_point)
                    current_hours += 1  # Arbitrarily assign 1 hour for each point
                else:
                    # Simple estimation of the time to reach the next point
                    travel_time = self.graph.distance_matrix[current_agent.current_point][next_point] / current_agent.speed
                    if current_hours + travel_time < 6:
                        current_agent.visit_point(next_point)
                        current_hours += travel_time
                    else:
                        break  # Terminate the inner loop if time exceeds 6 hours but continue in the outer loop

    def get_routes(self):
        """
        Retrieves the routes generated by the algorithm.

        Returns:
            list: A list of tuples containing the tour and total time taken by each agent.
        """
        return [(agent.tour, agent.tour_time(self.graph)) for agent in self.agents]
