from utils.Point import Point
from utils.Graph import Graph
from utils.MapPlotter import MapPlotter
from AntColonyOptimization.GraphAntColony import GraphAntColony
from AntColonyOptimization.AntColonyOptimization import AntColonyOptimization
from LazyAlgorithm.LazyAlgorithm import LazyAlgorithm
from SimulatedAnnealing.SimulatedAnnealing import SimulatedAnnealing
import time
import pandas as pd
import matplotlib.pyplot as plt


'''
Auxiliary functions
'''

def plot_routes(graph_points, routes, max_plots=None):
        """
        Plots the routes for the agents on separate maps.
        
        :param graph_points: List of Point objects.
        :param routes: List of routes generated by the GreedyAlgorithm.
        :param max_plots: Maximum number of routes to be plotted.
        """
        # If max_plots is not specified, plot all routes
        if max_plots is None:
            max_plots = len(routes)

        # Create a color map
        colors = plt.cm.get_cmap('tab20', max_plots)

        for i, (route, time) in enumerate(routes[:max_plots]):
            fig, ax = plt.subplots()
            x = [graph_points[idx].longitude for idx in route]
            y = [graph_points[idx].latitude for idx in route]

            ax.plot(x, y, marker='o', color=colors(i), linestyle='-', label=f'Agent {i+1} Route')
            ax.scatter(x, y, color=colors(i))
            
            ax.set_xlabel('Longitude')
            ax.set_ylabel('Latitude')
            ax.set_title(f'Route by Agent {i+1} (Total time: {time:.2f} hours)')
            ax.legend()

            # Save the plot to a file or show
            plt.show()

'''
Functions to organize algorithms
'''

def run_ant_colony_optimization():
    df = pd.read_csv(r'C:\Users\Inteli\Documents\2024-1B-T07-CC06-G04\codigo\algorithm\data_source\amostra_menor.csv', sep=";")
    df['INDICE'] = df['INDICE'].astype(int)

    # Adding a filter
    df = df[df['CODIGO_ROTA'] == '72_203']
    print(f"Filtered df with 'CODIGO_ROTA' = '72_203': {len(df)} values.")

    # Error exception
    required_columns = ['INDICE', 'LATITUDE', 'LONGITUDE', 'CODIGO_ROTA']
    if not all(col in df.columns for col in required_columns):
        raise ValueError(f"DataFrame must contain the columns {required_columns}.")

    create_point = lambda row: Point(row['INDICE'], row['LATITUDE'], row['LONGITUDE'])
    graph_points = df.apply(create_point, axis=1).tolist()
    print("Points created successfully.")

    graph = GraphAntColony(graph_points)
    print("Graph created successfully.")

    # ACO parameters
    num_ants = 5
    alpha = 1.0
    beta = 5.0
    evaporation_rate = 0.5
    iterations = 100

    # Running ACO
    aco = AntColonyOptimization(graph, num_ants, alpha, beta, evaporation_rate, iterations)
    print("Starting the execution of the ACO algorithm.")
    start_time = time.time()
    aco.run()
    end_time = time.time()
    print("Execution of the ACO algorithm completed.")

    # Results
    print("Best tour:", aco.best_tour)
    print("Best tour length:", aco.best_tour_length)
    print(f"Time to run: {end_time - start_time} seconds")

    '''
    Plotting map
    '''

    plot_map = False
    if (plot_map) :
        map = MapPlotter(graph_points, aco.best_tour, "aco_map_1")
        map.plot_map()

def run_lazy_algorithm():
    df = pd.read_csv(r'C:\Users\Inteli\Documents\2024-1B-T07-CC06-G04\codigo\algorithm\data_source\amostra_menor.csv', sep=";")
    df['INDICE'] = df['INDICE'].astype(int)

    print(f"Total df: {len(df)} values.")

    # Error exception
    required_columns = ['INDICE', 'LATITUDE', 'LONGITUDE']
    if not all(col in df.columns for col in required_columns):
        raise ValueError(f"DataFrame must contain the columns {required_columns}.")

    create_point = lambda row: Point(row['INDICE'], row['LATITUDE'], row['LONGITUDE'])
    graph_points = df.apply(create_point, axis=1).tolist()
    print("Points created successfully.")

    graph = Graph(graph_points)
    print("Graph created successfully.")

    '''
    Running: Greedy Algorithm
    '''

    # Initializing GreedyAlgorithm with the created graph
    greedy_algorithm = LazyAlgorithm(graph)
    print("GreedyAlgorithm initialized successfully.")

    # Generate routes using GreedyAlgorithm
    greedy_algorithm.generate_routes()
    print("Routes generated successfully.")

    # Obtain and print routes and times for each agent
    routes = greedy_algorithm.get_routes()
    for i, (route, time) in enumerate(routes):
        print(f"Agent {i + 1}:")
        print(f"  Route: {route}")
        print(f"  Total time: {time:.2f} hours")

    # Calling the function to plot the routes
    plot_routes(graph_points, routes, max_plots=5)  # Adjust max_plots to limit the number of maps

def run_simulated_annealing():
    # Load CSV data - Change path on each PC
    df = pd.read_csv(r'C:\Users\Inteli\Documents\2024-1B-T07-CC06-G04\codigo\algorithm\data_source\amostra_menor.csv', sep=";")
    df['INDICE'] = df['INDICE'].astype(int)

    # Apply a filter
    df = df[df['CODIGO_ROTA'] == '72_203']
    print(f"Filtered DataFrame with 'CODIGO_ROTA' = '72_203': {len(df)} values.")

    # Check required columns
    required_columns = ['INDICE', 'LATITUDE', 'LONGITUDE', 'CODIGO_ROTA']
    if not all(col in df.columns for col in required_columns):
        raise ValueError(f"DataFrame must contain the columns {required_columns}.")

    # Create points
    def create_point(row): return Point(
        row['INDICE'], row['LATITUDE'], row['LONGITUDE'])
    graph_points = df.apply(create_point, axis=1).tolist()
    print("Points created successfully.")

    # Create the graph
    graph = Graph(graph_points)
    print("Graph created successfully.")

    # Parameters for Simulated Annealing
    initial_temp = 10000
    cooling_rate = 0.99
    stopping_temp = 0.1

    # Execute Simulated Annealing
    sa = SimulatedAnnealing(graph)
    print("Starting the execution of the Simulated Annealing algorithm.")
    best_route, best_route_cost = sa.run(initial_temp, cooling_rate, stopping_temp)
    print("Execution of the Simulated Annealing algorithm completed.")

    # Display results
    print("Best route found:", best_route)
    print("Cost of the best route:", best_route_cost)

    '''
    Plotting map
    '''
    map = MapPlotter(graph_points, best_route, "sa_map_1")
    map.plot_map()

def main():
    algorithm = input("Choose the algorithm to be executed (aco | lazy | annealing): ")

    if algorithm == "aco":
        run_ant_colony_optimization()
    elif algorithm == "lazy":
        run_lazy_algorithm()
    elif algorithm == "annealing":
        run_simulated_annealing()
    else:
        print("Algorithm not recognized. Choose from 'aco', 'lazy', or 'annealing'.")

if __name__ == "__main__":
    main()
